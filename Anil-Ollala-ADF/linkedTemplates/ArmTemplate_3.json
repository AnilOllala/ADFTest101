{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Anil-Ollala-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/JoinPowerquery')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "DS_DEPT_SOURCE",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DS_DEPT_SOURCE",
							"dataset": {
								"referenceName": "DS_DEPT_SOURCE",
								"type": "DatasetReference"
							}
						},
						{
							"name": "DS_EMP_DEPT",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DS_EMP_DEPT",
							"dataset": {
								"referenceName": "DS_EMP_DEPT",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared DS_DEPT_SOURCE = let AdfDoc = AzureStorage.BlobContents(\"https://anilstorage004.blob.core.windows.net/adfemo/source/SQL_DEPT_6_Departments.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared DS_EMP_DEPT = let AdfDoc = AzureStorage.BlobContents(\"https://anilstorage004.blob.core.windows.net/empdept/SQL_EMP_Table.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"DS_DEPT_SOURCE\",\r\n  #\"Merged queries\" = Table.NestedJoin(Source, {\"DEPTNO\"}, DS_EMP_DEPT, {\"DEPTNO\"}, \"DS_EMP_DEPT\", JoinKind.Inner),\r\n  #\"Expanded DS_EMP_DEPT\" = Table.ExpandTableColumn(#\"Merged queries\", \"DS_EMP_DEPT\", {\"EMPNO\", \"ENAME\", \"JOB\", \"MGR\", \"HIREDATE\", \"SAL\", \"COMM\", \"DEPTNO\"}, {\"EMPNO\", \"ENAME\", \"JOB\", \"MGR\", \"HIREDATE\", \"SAL\", \"COMM\", \"DEPTNO.1\"}),\r\n  #\"Removed columns\" = Table.RemoveColumns(#\"Expanded DS_EMP_DEPT\", {\"DEPTNO.1\", \"LOC\", \"MGR\", \"COMM\"}),\r\n  #\"Renamed columns\" = Table.RenameColumns(#\"Removed columns\", {{\"HIREDATE\", \"JoiningDate\"}, {\"ENAME\", \"Employee Name\"}}) in #\"Renamed columns\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookUpSortDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_EMP_DEPT_SOURCE",
								"type": "DatasetReference"
							},
							"name": "Employee"
						},
						{
							"dataset": {
								"referenceName": "DS_DEPT_ONLY",
								"type": "DatasetReference"
							},
							"name": "Dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookupEmpDept"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPNO as string,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as string,",
						"          HIREDATE as string,",
						"          SAL as string,",
						"          COMM as string,",
						"          DEPTNO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employee",
						"source(output(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Dept",
						"Employee, Dept lookup(Employee@DEPTNO == Dept@DEPTNO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupEmpDept",
						"lookupEmpDept sort(asc(ENAME, true),",
						"     caseInsensitive: true,",
						"     partitionLevel: true) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     partitionFileNames:['LookUpSink2.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewBranchSelectDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_EMP_DEPT_SOURCE",
								"type": "DatasetReference"
							},
							"name": "Employee"
						},
						{
							"dataset": {
								"referenceName": "DS_DEPT_ONLY",
								"type": "DatasetReference"
							},
							"name": "Dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPNO as string,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as string,",
						"          HIREDATE as string,",
						"          SAL as string,",
						"          COMM as string,",
						"          DEPTNO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employee",
						"source(output(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Dept",
						"Employee aggregate(groupBy(DEPTNO),",
						"     TotalNoOfEmployees = count(DEPTNO),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"Employee, Dept join(Employee@DEPTNO == Dept@DEPTNO,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 sort(asc(ENAME, true),",
						"     caseInsensitive: true,",
						"     partitionLevel: true) ~> sort1",
						"sort1 select(mapColumn(",
						"          EMPNO,",
						"          ENAME,",
						"          DEPTNO = Dept@DEPTNO,",
						"          DNAME,",
						"          HIREDATE,",
						"          JOB,",
						"          SAL,",
						"          LOC",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     partitionFileNames:['AggregateColumns.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     partitionFileNames:['SortedSelectColumns.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parse_Dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Parse_Source",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Parse_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "parse1"
						},
						{
							"name": "parse2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPNO as string,",
						"          ENAME as string,",
						"          JOB as string,",
						"          Skills as string,",
						"          Address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 parse(ParseSkill1 = Skills ? (skill1 as string,",
						"          skill2 as string,",
						"          skill3 as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parse1",
						"parse1 parse(ParseAddress = Address ? (City as string,",
						"          Country as string),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parse2",
						"parse2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPNO as string,",
						"          ENAME as string,",
						"          JOB as string,",
						"          Skills as string,",
						"          Address as string",
						"     ),",
						"     partitionFileNames:['ParseOutput.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          EMPNO,",
						"          ENAME,",
						"          JOB,",
						"          Skills = ParseSkill1.skill1,",
						"          skill2 = ParseSkill1.skill2,",
						"          Address",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PivotDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_WAFA_TABLE",
								"type": "DatasetReference"
							},
							"name": "WafaTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          NAME as string,",
						"          GENDER as string,",
						"          Dept as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WafaTable",
						"WafaTable aggregate(groupBy(GENDER,",
						"          Dept),",
						"     TotalNoOfEmp = count(ID)) ~> aggregate1",
						"WafaTable pivot(groupBy(Dept),",
						"     pivotBy(GENDER),",
						"     {} = count(ID),",
						"     columnNaming: 'Toal_$N$V_Employees',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     partitionFileNames:['PivotData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     partitionFileNames:['AggregateData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stringify_Dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Json1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "stringify1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Contact as (Email as string, {phone } as long),",
						"          Skills as string[],",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 stringify(ContactStringify = Contact ? string,",
						"     format: 'json') ~> stringify1",
						"stringify1 derive(ContactStringify = toString(ContactStringify)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          name,",
						"          ContactStringify",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     partitionFileNames:['StringifyOutput.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SurrogateWindowsDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_EMP_DEPT_SOURCE",
								"type": "DatasetReference"
							},
							"name": "Employees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPNO as string,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as string,",
						"          HIREDATE as string,",
						"          SAL as integer,",
						"          COMM as string,",
						"          DEPTNO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employees",
						"Employees keyGenerate(output(SurrogateKeyVal as long),",
						"     startAt: 101L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> surrogateKey1",
						"Employees window(over(DEPTNO),",
						"     asc(SAL, true),",
						"     AvgSalary = avg(SAL),",
						"          DenseRank = denseRank(),",
						"          RowRank = rank()) ~> window1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     partitionFileNames:['SurrogateKeySink.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     partitionFileNames:['WindowsSink.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnPivotDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_UNPIVOT_TABLE",
								"type": "DatasetReference"
							},
							"name": "Customers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "unpivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PO as string,",
						"          Customer as string,",
						"          Apples as string,",
						"          Mangoes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customers",
						"Customers unpivot(output(",
						"          Fruits as string,",
						"          Qty as string",
						"     ),",
						"     ungroupBy(PO,",
						"          Customer),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivot1",
						"unpivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     partitionFileNames:['UnPivotData.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_EMP_DEPT_SOURCE",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DS_DEPT_SOURCE",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"name": "CachedSink"
						},
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "rank1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPNO as string,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as string,",
						"          HIREDATE as string,",
						"          SAL as string,",
						"          COMM as string,",
						"          DEPTNO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 rank(desc(SAL, true),",
						"     output(Rank_sal as long),",
						"     dense: true) ~> rank1",
						"rank1 keyGenerate(output(KeyCol1 as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> CachedSink",
						"source2 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_EMP_DEPT_SOURCE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "StringFunctions",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPNO as string,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as string,",
						"          HIREDATE as string,",
						"          SAL as string,",
						"          COMM as string,",
						"          DEPTNO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(CommissionUpdated = COMMDEPT(DEPTNO),",
						"          CommissionforNULL = CommissionNULL(COMM)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPTNO as string,",
						"          DNAME as string,",
						"          LOC as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "DS_EMP_DEPT_SOURCE",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DS_EMP_DEPT_SOURCE",
							"dataset": {
								"referenceName": "DS_EMP_DEPT_SOURCE",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared DS_EMP_DEPT_SOURCE = let AdfDoc = AzureStorage.BlobContents(\"https://anilstorage004.blob.core.windows.net/adfemo/source/SQL_EMP_Table_With_Other_dept.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"DS_EMP_DEPT_SOURCE\",\r\n  #\"Removed columns\" = Table.RemoveColumns(Source, {\"MGR\", \"COMM\"}) in #\"Removed columns\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AggregateDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AggregateDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpData": {},
									"DeptData": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-29T04:43:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConditionalDataFlowExecution')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ConditionalSplit",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"Dept10EmployeesSink": {},
									"Dept20EmployeesSink": {},
									"DeptOtherEmployeesSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-29T05:12:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowExistNoExistUnion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExistUnion",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ExistUnionDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpData": {},
									"DeptData": {},
									"NoExistSink": {},
									"ExistSink": {},
									"UnionSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-01T04:35:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowPivot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PivotDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"WafaTable": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-02T05:40:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PivotDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowSelectNewBranch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "NewBranchSelectDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employee": {},
									"Dept": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-02T04:18:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/NewBranchSelectDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataflowLookUp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LookUpSortDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employee": {},
									"Dept": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-01T06:18:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LookUpSortDataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DerivedColumnDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DerivedDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-29T05:44:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute Pipeline Demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyActivity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DeleteActivity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-24T03:56:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FilterExecutionDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FilterDataflow",
								"type": "DataFlowReference",
								"parameters": {
									"DeptNo": {
										"value": "'@{pipeline().parameters.DeptNum}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"EMPTable": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DeptNum": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-02T18:37:00Z"
			},
			"dependsOn": []
		}
	]
}