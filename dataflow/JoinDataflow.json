{
	"name": "JoinDataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_EMP_DEPT",
						"type": "DatasetReference"
					},
					"name": "empsource"
				},
				{
					"dataset": {
						"referenceName": "DS_DEPT_ONLY",
						"type": "DatasetReference"
					},
					"name": "depsource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Target",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPNO as string,",
				"          ENAME as string,",
				"          JOB as string,",
				"          MGR as string,",
				"          HIREDATE as string,",
				"          SAL as string,",
				"          COMM as string,",
				"          DEPTNO as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empsource",
				"source(output(",
				"          DEPTNO as string,",
				"          DNAME as string,",
				"          LOC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> depsource",
				"empsource, depsource join(empsource@DEPTNO == depsource@DEPTNO,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['MergedData.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          EMPNO,",
				"          ENAME,",
				"          JOB,",
				"          MGR,",
				"          HIREDATE,",
				"          SAL,",
				"          COMM,",
				"          DEPTNO = depsource@DEPTNO,",
				"          DNAME,",
				"          LOC",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}