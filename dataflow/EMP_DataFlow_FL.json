{
	"name": "EMP_DataFlow_FL",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_EMP_DEPT_SOURCE",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_DEPT_SOURCE",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "assert1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPNO as string,",
				"          ENAME as string,",
				"          JOB as string,",
				"          MGR as string,",
				"          HIREDATE as string,",
				"          SAL as string,",
				"          COMM as string,",
				"          DEPTNO as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          DEPTNO as string,",
				"          DNAME as string,",
				"          LOC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 assert(expectTrue(!isNull(COMM), false, 'assertNULL', null, 'Checking NULLS'),",
				"     expectExists(source1@DEPTNO == source2@DEPTNO, false, 'assertDEP', null, 'Checking Exists in DEP')) ~> assert1",
				"assert1 derive(Assert_Col_Check = isError(),",
				"          IncorrectDEP = hasError('assertDEP')) ~> derivedColumn1",
				"derivedColumn1 filter(Assert_Col_Check == false()) ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DEPTNO as string,",
				"          DNAME as string,",
				"          LOC as string",
				"     ),",
				"     partitionFileNames:['FlowletEmp.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}